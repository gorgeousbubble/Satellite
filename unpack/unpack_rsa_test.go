package unpack

import (
	"bytes"
	"io/ioutil"
	. "satellite/utils"
	"sync"
	"testing"
)

// TestUnpackRSA function
func TestUnpackRSA(t *testing.T) {
	src := "../test/data/unpack/file_rsa.txt"
	dest := "../test/data/unpack/"
	err := UnpackRSA(src, dest)
	if err != nil {
		t.Fatal("Error Unpack AES:", err)
	}
}

// TestUnpackRSAConfine function
func TestUnpackRSAConfine(t *testing.T) {
	src := "../test/data/unpack/file_rsa.txt"
	dest := "../test/data/unpack/"
	err := UnpackRSAConfine(src, dest)
	if err != nil {
		t.Fatal("Error Unpack AES:", err)
	}
}

// TestUnpackRSAToFile function
func TestUnpackRSAToFile(t *testing.T) {
	src := "../test/data/unpack/file_rsa.txt"
	dest := "../test/data/unpack/"
	target := "file_1.txt"
	err := UnpackRSAToFile(src, target, dest)
	if err != nil {
		t.Fatal("Error Unpack RSA To File:", err)
	}
}

// TestUnpackRSAToFileConfine function
func TestUnpackRSAToFileConfine(t *testing.T) {
	src := "../test/data/unpack/file_rsa.txt"
	dest := "../test/data/unpack/"
	target := "file_1.txt"
	err := UnpackRSAToFileConfine(src, target, dest)
	if err != nil {
		t.Fatal("Error Unpack RSA To File:", err)
	}
}

// TestUnpackRSAToMemory function
func TestUnpackRSAToMemory(t *testing.T) {
	var dest []byte
	src := "../test/data/unpack/file_rsa.txt"
	target := "file_1.txt"
	err := UnpackRSAToMemory(src, target, &dest)
	if err != nil {
		t.Fatal("Error Unpack RSA To Memory:", err)
	}
}

// TestUnpackRSAExtractInfo function
func TestUnpackRSAExtractInfo(t *testing.T) {
	var dest []string
	var sz []int
	src := "../test/data/unpack/file_rsa.txt"
	err := UnpackRSAExtractInfo(src, &dest, &sz)
	if err != nil {
		t.Fatal("Error Unpack RSA Extract Information:", err)
	}
	if len(dest) != 5 {
		t.Fatal("Error Extract file number")
	}
}

// TestUnpackRSAWorkCalculate function
func TestUnpackRSAWorkCalculate(t *testing.T) {
	src := "../test/data/unpack/file_rsa.txt"
	_, err := UnpackRSAWorkCalculate(src)
	if err != nil {
		t.Fatal("Error Unpack RSA Work Calculate:", err)
	}
}

// TestUnpackRSAOneToMemory function
func TestUnpackRSAOneToMemory(t *testing.T) {
	var dest []byte
	src := []byte{
		0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
		0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
		0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
		0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
		0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
		0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
		0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
		0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
		0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
		0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
		0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
		0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
		0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
		0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
		0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
		0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
		0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
		0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
		0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
		0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
		0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
		0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
		0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
		0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
		0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
		0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
		0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
		0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
		0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
		0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
		0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
		0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
		0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
		0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
		0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
		0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
		0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
		0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
		0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
		0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
		0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
		0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
		0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
		0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
		0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
		0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
		0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
		0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
		0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
		0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
		0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
		0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
		0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
		0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
		0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
		0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
		0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
		0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
		0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
		0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
		0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
		0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
		0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
		0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
	}
	hh := TUnpackRSAOne{}
	hh.Name = make([]byte, 32)
	hh.Key = make([]byte, 1024)
	hh.OriginSize = make([]byte, 4)
	hh.CryptSize = make([]byte, 4)

	rd := bytes.NewReader(src)
	_, err := rd.Read(hh.Name)
	if err != nil {
		t.Fatal("Error read header name:", err)
	}
	_, err = rd.Read(hh.Key)
	if err != nil {
		t.Fatal("Error read header key:", err)
	}
	_, err = rd.Read(hh.OriginSize)
	if err != nil {
		t.Fatal("Error read header origin size:", err)
	}
	_, err = rd.Read(hh.CryptSize)
	if err != nil {
		t.Fatal("Error read header crypt size:", err)
	}
	s := make([]byte, BytesToInt(hh.CryptSize))
	n, err := rd.Read(s)
	if n <= 0 {
		t.Fatal("Error read body:", err)
	}
	err = UnpackRSAOneToMemory(s, hh, &dest)
	if err != nil {
		t.Fatal("Error unpack crypt file:", err)
	}
	if !bytes.Equal(dest, []byte("hello,world!")) {
		t.Fatal("Error unpack content:", string(dest))
	}
}

// TestUnpackRSAOneGo function
func TestUnpackRSAOneGo(t *testing.T) {
	var wg sync.WaitGroup
	src := []byte{
		0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
		0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
		0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
		0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
		0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
		0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
		0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
		0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
		0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
		0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
		0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
		0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
		0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
		0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
		0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
		0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
		0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
		0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
		0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
		0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
		0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
		0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
		0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
		0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
		0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
		0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
		0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
		0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
		0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
		0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
		0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
		0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
		0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
		0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
		0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
		0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
		0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
		0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
		0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
		0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
		0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
		0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
		0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
		0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
		0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
		0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
		0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
		0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
		0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
		0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
		0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
		0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
		0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
		0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
		0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
		0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
		0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
		0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
		0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
		0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
		0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
		0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
		0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
		0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
	}
	dest := "../test/data/unpack/"
	hh := TUnpackRSAOne{}
	hh.Name = make([]byte, 32)
	hh.Key = make([]byte, 1024)
	hh.OriginSize = make([]byte, 4)
	hh.CryptSize = make([]byte, 4)

	rd := bytes.NewReader(src)
	_, err := rd.Read(hh.Name)
	if err != nil {
		t.Fatal("Error read header name:", err)
	}
	_, err = rd.Read(hh.Key)
	if err != nil {
		t.Fatal("Error read header key:", err)
	}
	_, err = rd.Read(hh.OriginSize)
	if err != nil {
		t.Fatal("Error read header origin size:", err)
	}
	_, err = rd.Read(hh.CryptSize)
	if err != nil {
		t.Fatal("Error read header crypt size:", err)
	}
	s := make([]byte, BytesToInt(hh.CryptSize))
	n, err := rd.Read(s)
	if n <= 0 {
		t.Fatal("Error read body:", err)
	}
	wg.Add(1)
	go UnpackRSAOneGo(s, hh, dest, &wg)
	wg.Wait()
}

// TestUnpackRSAOne function
func TestUnpackRSAOne(t *testing.T) {
	src := []byte{
		0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
		0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
		0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
		0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
		0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
		0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
		0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
		0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
		0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
		0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
		0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
		0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
		0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
		0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
		0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
		0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
		0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
		0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
		0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
		0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
		0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
		0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
		0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
		0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
		0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
		0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
		0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
		0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
		0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
		0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
		0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
		0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
		0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
		0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
		0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
		0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
		0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
		0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
		0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
		0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
		0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
		0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
		0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
		0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
		0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
		0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
		0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
		0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
		0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
		0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
		0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
		0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
		0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
		0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
		0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
		0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
		0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
		0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
		0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
		0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
		0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
		0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
		0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
		0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
	}
	dest := "../test/data/unpack/"
	hh := TUnpackRSAOne{}
	hh.Name = make([]byte, 32)
	hh.Key = make([]byte, 1024)
	hh.OriginSize = make([]byte, 4)
	hh.CryptSize = make([]byte, 4)

	rd := bytes.NewReader(src)
	_, err := rd.Read(hh.Name)
	if err != nil {
		t.Fatal("Error read header name:", err)
	}
	_, err = rd.Read(hh.Key)
	if err != nil {
		t.Fatal("Error read header key:", err)
	}
	_, err = rd.Read(hh.OriginSize)
	if err != nil {
		t.Fatal("Error read header origin size:", err)
	}
	_, err = rd.Read(hh.CryptSize)
	if err != nil {
		t.Fatal("Error read header crypt size:", err)
	}
	s := make([]byte, BytesToInt(hh.CryptSize))
	n, err := rd.Read(s)
	if n <= 0 {
		t.Fatal("Error read body:", err)
	}
	err = UnpackRSAOne(s, hh, dest)
	if err != nil {
		t.Fatal("Error unpack crypt file:", err)
	}
}

// TestUnpackRSAOneConfine function
func TestUnpackRSAOneConfine(t *testing.T) {
	src := []byte{
		0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
		0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
		0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
		0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
		0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
		0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
		0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
		0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
		0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
		0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
		0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
		0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
		0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
		0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
		0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
		0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
		0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
		0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
		0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
		0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
		0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
		0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
		0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
		0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
		0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
		0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
		0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
		0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
		0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
		0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
		0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
		0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
		0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
		0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
		0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
		0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
		0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
		0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
		0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
		0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
		0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
		0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
		0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
		0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
		0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
		0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
		0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
		0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
		0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
		0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
		0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
		0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
		0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
		0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
		0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
		0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
		0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
		0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
		0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
		0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
		0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
		0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
		0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
		0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
	}
	dest := "../test/data/unpack/"
	hh := TUnpackRSAOne{}
	hh.Name = make([]byte, 32)
	hh.Key = make([]byte, 1024)
	hh.OriginSize = make([]byte, 4)
	hh.CryptSize = make([]byte, 4)

	rd := bytes.NewReader(src)
	_, err := rd.Read(hh.Name)
	if err != nil {
		t.Fatal("Error read header name:", err)
	}
	_, err = rd.Read(hh.Key)
	if err != nil {
		t.Fatal("Error read header key:", err)
	}
	_, err = rd.Read(hh.OriginSize)
	if err != nil {
		t.Fatal("Error read header origin size:", err)
	}
	_, err = rd.Read(hh.CryptSize)
	if err != nil {
		t.Fatal("Error read header crypt size:", err)
	}
	s := make([]byte, BytesToInt(hh.CryptSize))
	n, err := rd.Read(s)
	if n <= 0 {
		t.Fatal("Error read body:", err)
	}
	err = UnpackRSAOneConfine(s, hh, dest)
	if err != nil {
		t.Fatal("Error unpack crypt file:", err)
	}
}

// TestRSADecryptGo function
func TestRSADecryptGo(t *testing.T) {
	var dest []byte
	var wg sync.WaitGroup
	src := []byte{
		0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
		0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
		0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
		0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
		0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
		0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
		0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
		0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
	}
	wg.Add(1)
	go RSADecryptGo(src, ConstRSAPrivateKey, &dest, &wg)
	wg.Wait()
	err := ioutil.WriteFile("../test/data/unpack/file.txt", dest, 0644)
	if err != nil {
		t.Fatal("Error Write RSA One:", err)
	}
}

// TestRSADecrypt function
func TestRSADecrypt(t *testing.T) {
	src := []byte{
		0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
		0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
		0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
		0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
		0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
		0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
		0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
		0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
	}
	r, err := RSADecrypt(src, ConstRSAPrivateKey)
	if err != nil {
		t.Fatal("Error RSA Decrypt:", err)
	}
	err = ioutil.WriteFile("../test/data/unpack/file.txt", r, 0644)
	if err != nil {
		t.Fatal("Error Write RSA One:", err)
	}
}

// BenchmarkUnpackRSA function
func BenchmarkUnpackRSA(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := "../test/data/unpack/file_rsa.txt"
		dest := "../test/data/unpack/"
		err := UnpackRSA(src, dest)
		if err != nil {
			b.Fatal("Error Unpack AES:", err)
		}
	}
}

// BenchmarkUnpackRSAConfine function
func BenchmarkUnpackRSAConfine(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := "../test/data/unpack/file_rsa.txt"
		dest := "../test/data/unpack/"
		err := UnpackRSAConfine(src, dest)
		if err != nil {
			b.Fatal("Error Unpack AES:", err)
		}
	}
}

// BenchmarkUnpackRSAToFile function
func BenchmarkUnpackRSAToFile(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := "../test/data/unpack/file_rsa.txt"
		dest := "../test/data/unpack/"
		target := "file_1.txt"
		err := UnpackRSAToFile(src, target, dest)
		if err != nil {
			b.Fatal("Error Unpack RSA To File:", err)
		}
	}
}

// BenchmarkUnpackRSAToFileConfine function
func BenchmarkUnpackRSAToFileConfine(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := "../test/data/unpack/file_rsa.txt"
		dest := "../test/data/unpack/"
		target := "file_1.txt"
		err := UnpackRSAToFileConfine(src, target, dest)
		if err != nil {
			b.Fatal("Error Unpack RSA To File:", err)
		}
	}
}

// BenchmarkUnpackRSAToMemory function
func BenchmarkUnpackRSAToMemory(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var dest []byte
		src := "../test/data/unpack/file_rsa.txt"
		target := "file_1.txt"
		err := UnpackRSAToMemory(src, target, &dest)
		if err != nil {
			b.Fatal("Error Unpack RSA To Memory:", err)
		}
	}
}

// BenchmarkUnpackRSAExtractInfo function
func BenchmarkUnpackRSAExtractInfo(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var dest []string
		var sz []int
		src := "../test/data/unpack/file_rsa.txt"
		err := UnpackRSAExtractInfo(src, &dest, &sz)
		if err != nil {
			b.Fatal("Error Unpack RSA Extract Information:", err)
		}
		if len(dest) != 5 {
			b.Fatal("Error Extract file number")
		}
	}
}

// BenchmarkUnpackRSAWorkCalculate function
func BenchmarkUnpackRSAWorkCalculate(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := "../test/data/unpack/file_rsa.txt"
		_, err := UnpackRSAWorkCalculate(src)
		if err != nil {
			b.Fatal("Error Unpack RSA Work Calculate:", err)
		}
	}
}

// BenchmarkUnpackRSAOneToMemory function
func BenchmarkUnpackRSAOneToMemory(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var dest []byte
		src := []byte{
			0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
			0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
			0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
			0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
			0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
			0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
			0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
			0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
			0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
			0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
			0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
			0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
			0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
			0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
			0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
			0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
			0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
			0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
			0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
			0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
			0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
			0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
			0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
			0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
			0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
			0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
			0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
			0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
			0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
			0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
			0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
			0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
			0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
			0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
			0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
			0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
			0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
			0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
			0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
			0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
			0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
			0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
			0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
			0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
			0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
			0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
			0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
			0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
			0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
			0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
			0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
			0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
			0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
			0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
			0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
			0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
			0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
			0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
			0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
			0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
			0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
			0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
			0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
			0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
		}
		hh := TUnpackRSAOne{}
		hh.Name = make([]byte, 32)
		hh.Key = make([]byte, 1024)
		hh.OriginSize = make([]byte, 4)
		hh.CryptSize = make([]byte, 4)

		rd := bytes.NewReader(src)
		_, err := rd.Read(hh.Name)
		if err != nil {
			b.Fatal("Error read header name:", err)
		}
		_, err = rd.Read(hh.Key)
		if err != nil {
			b.Fatal("Error read header key:", err)
		}
		_, err = rd.Read(hh.OriginSize)
		if err != nil {
			b.Fatal("Error read header origin size:", err)
		}
		_, err = rd.Read(hh.CryptSize)
		if err != nil {
			b.Fatal("Error read header crypt size:", err)
		}
		s := make([]byte, BytesToInt(hh.CryptSize))
		n, err := rd.Read(s)
		if n <= 0 {
			b.Fatal("Error read body:", err)
		}
		err = UnpackRSAOneToMemory(s, hh, &dest)
		if err != nil {
			b.Fatal("Error unpack crypt file:", err)
		}
		if !bytes.Equal(dest, []byte("hello,world!")) {
			b.Fatal("Error unpack content:", string(dest))
		}
	}
}

// BenchmarkUnpackRSAOneGo function
func BenchmarkUnpackRSAOneGo(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var wg sync.WaitGroup
		src := []byte{
			0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
			0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
			0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
			0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
			0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
			0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
			0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
			0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
			0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
			0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
			0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
			0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
			0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
			0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
			0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
			0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
			0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
			0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
			0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
			0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
			0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
			0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
			0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
			0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
			0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
			0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
			0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
			0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
			0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
			0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
			0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
			0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
			0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
			0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
			0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
			0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
			0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
			0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
			0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
			0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
			0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
			0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
			0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
			0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
			0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
			0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
			0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
			0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
			0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
			0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
			0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
			0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
			0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
			0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
			0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
			0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
			0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
			0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
			0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
			0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
			0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
			0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
			0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
			0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
		}
		dest := "../test/data/unpack/"
		hh := TUnpackRSAOne{}
		hh.Name = make([]byte, 32)
		hh.Key = make([]byte, 1024)
		hh.OriginSize = make([]byte, 4)
		hh.CryptSize = make([]byte, 4)

		rd := bytes.NewReader(src)
		_, err := rd.Read(hh.Name)
		if err != nil {
			b.Fatal("Error read header name:", err)
		}
		_, err = rd.Read(hh.Key)
		if err != nil {
			b.Fatal("Error read header key:", err)
		}
		_, err = rd.Read(hh.OriginSize)
		if err != nil {
			b.Fatal("Error read header origin size:", err)
		}
		_, err = rd.Read(hh.CryptSize)
		if err != nil {
			b.Fatal("Error read header crypt size:", err)
		}
		s := make([]byte, BytesToInt(hh.CryptSize))
		n, err := rd.Read(s)
		if n <= 0 {
			b.Fatal("Error read body:", err)
		}
		wg.Add(1)
		go UnpackRSAOneGo(s, hh, dest, &wg)
		wg.Wait()
	}
}

// BenchmarkUnpackRSAOne function
func BenchmarkUnpackRSAOne(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := []byte{
			0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
			0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
			0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
			0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
			0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
			0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
			0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
			0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
			0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
			0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
			0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
			0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
			0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
			0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
			0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
			0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
			0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
			0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
			0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
			0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
			0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
			0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
			0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
			0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
			0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
			0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
			0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
			0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
			0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
			0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
			0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
			0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
			0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
			0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
			0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
			0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
			0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
			0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
			0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
			0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
			0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
			0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
			0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
			0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
			0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
			0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
			0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
			0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
			0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
			0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
			0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
			0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
			0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
			0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
			0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
			0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
			0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
			0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
			0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
			0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
			0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
			0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
			0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
			0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
		}
		dest := "../test/data/unpack/"
		hh := TUnpackRSAOne{}
		hh.Name = make([]byte, 32)
		hh.Key = make([]byte, 1024)
		hh.OriginSize = make([]byte, 4)
		hh.CryptSize = make([]byte, 4)

		rd := bytes.NewReader(src)
		_, err := rd.Read(hh.Name)
		if err != nil {
			b.Fatal("Error read header name:", err)
		}
		_, err = rd.Read(hh.Key)
		if err != nil {
			b.Fatal("Error read header key:", err)
		}
		_, err = rd.Read(hh.OriginSize)
		if err != nil {
			b.Fatal("Error read header origin size:", err)
		}
		_, err = rd.Read(hh.CryptSize)
		if err != nil {
			b.Fatal("Error read header crypt size:", err)
		}
		s := make([]byte, BytesToInt(hh.CryptSize))
		n, err := rd.Read(s)
		if n <= 0 {
			b.Fatal("Error read body:", err)
		}
		err = UnpackRSAOne(s, hh, dest)
		if err != nil {
			b.Fatal("Error unpack crypt file:", err)
		}
	}
}

// BenchmarkUnpackRSAOneConfine function
func BenchmarkUnpackRSAOneConfine(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := []byte{
			0x66, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x42, 0x45, 0x47, 0x49, 0x4E, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50,
			0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45, 0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A,
			0x4D, 0x49, 0x49, 0x43, 0x58, 0x41, 0x49, 0x42, 0x41, 0x41, 0x4B, 0x42, 0x67, 0x51, 0x43, 0x6B,
			0x4E, 0x2B, 0x7A, 0x74, 0x64, 0x2B, 0x63, 0x46, 0x54, 0x5A, 0x6A, 0x71, 0x63, 0x77, 0x74, 0x32,
			0x45, 0x30, 0x36, 0x61, 0x53, 0x72, 0x48, 0x63, 0x38, 0x65, 0x2B, 0x42, 0x50, 0x39, 0x68, 0x55,
			0x6D, 0x72, 0x62, 0x45, 0x70, 0x58, 0x6E, 0x70, 0x71, 0x6C, 0x63, 0x55, 0x75, 0x79, 0x77, 0x6D,
			0x0A, 0x4C, 0x4F, 0x30, 0x76, 0x63, 0x35, 0x4C, 0x76, 0x38, 0x77, 0x2F, 0x42, 0x47, 0x71, 0x61,
			0x65, 0x49, 0x2F, 0x49, 0x74, 0x5A, 0x79, 0x36, 0x61, 0x4D, 0x43, 0x73, 0x32, 0x37, 0x4A, 0x49,
			0x31, 0x73, 0x57, 0x77, 0x74, 0x48, 0x57, 0x4C, 0x73, 0x65, 0x54, 0x6E, 0x44, 0x35, 0x6B, 0x69,
			0x45, 0x73, 0x32, 0x6C, 0x38, 0x63, 0x74, 0x42, 0x49, 0x53, 0x36, 0x42, 0x2F, 0x4E, 0x62, 0x62,
			0x50, 0x0A, 0x65, 0x51, 0x50, 0x5A, 0x30, 0x7A, 0x69, 0x69, 0x32, 0x6F, 0x58, 0x61, 0x65, 0x6C,
			0x39, 0x73, 0x32, 0x61, 0x4E, 0x52, 0x78, 0x4C, 0x47, 0x30, 0x34, 0x6D, 0x39, 0x6A, 0x4C, 0x7A,
			0x4E, 0x52, 0x42, 0x6D, 0x70, 0x38, 0x7A, 0x75, 0x64, 0x51, 0x6B, 0x42, 0x70, 0x63, 0x4A, 0x74,
			0x65, 0x44, 0x2B, 0x52, 0x39, 0x51, 0x41, 0x4A, 0x48, 0x42, 0x68, 0x51, 0x49, 0x44, 0x41, 0x51,
			0x41, 0x42, 0x0A, 0x41, 0x6F, 0x47, 0x41, 0x61, 0x5A, 0x4A, 0x61, 0x69, 0x72, 0x2B, 0x4F, 0x6B,
			0x57, 0x59, 0x31, 0x62, 0x47, 0x50, 0x52, 0x64, 0x6E, 0x4D, 0x72, 0x45, 0x52, 0x33, 0x38, 0x41,
			0x6D, 0x4B, 0x32, 0x36, 0x6F, 0x79, 0x30, 0x38, 0x6F, 0x38, 0x54, 0x2B, 0x49, 0x2B, 0x35, 0x4E,
			0x48, 0x4D, 0x42, 0x30, 0x4A, 0x34, 0x54, 0x33, 0x2B, 0x62, 0x36, 0x42, 0x49, 0x74, 0x30, 0x5A,
			0x7A, 0x59, 0x48, 0x0A, 0x5A, 0x73, 0x6C, 0x50, 0x58, 0x46, 0x4D, 0x58, 0x6D, 0x67, 0x43, 0x2F,
			0x67, 0x50, 0x68, 0x2B, 0x6A, 0x36, 0x79, 0x2B, 0x77, 0x69, 0x33, 0x78, 0x73, 0x48, 0x63, 0x73,
			0x62, 0x6C, 0x32, 0x63, 0x6B, 0x6C, 0x2F, 0x6C, 0x6A, 0x48, 0x33, 0x6B, 0x70, 0x54, 0x72, 0x67,
			0x5A, 0x55, 0x4E, 0x61, 0x30, 0x34, 0x4C, 0x4D, 0x6E, 0x61, 0x74, 0x56, 0x69, 0x41, 0x31, 0x58,
			0x46, 0x6F, 0x4D, 0x47, 0x0A, 0x74, 0x61, 0x71, 0x42, 0x4D, 0x6C, 0x50, 0x46, 0x64, 0x6C, 0x56,
			0x63, 0x78, 0x6B, 0x50, 0x4F, 0x32, 0x4E, 0x4C, 0x78, 0x35, 0x77, 0x6D, 0x59, 0x4D, 0x74, 0x2B,
			0x37, 0x75, 0x78, 0x38, 0x56, 0x4E, 0x7A, 0x37, 0x56, 0x6D, 0x6F, 0x6A, 0x6A, 0x52, 0x78, 0x42,
			0x63, 0x4C, 0x2F, 0x45, 0x43, 0x51, 0x51, 0x44, 0x42, 0x31, 0x73, 0x2F, 0x44, 0x38, 0x30, 0x59,
			0x47, 0x37, 0x48, 0x77, 0x56, 0x0A, 0x6F, 0x52, 0x38, 0x61, 0x44, 0x38, 0x61, 0x41, 0x67, 0x61,
			0x57, 0x30, 0x50, 0x48, 0x79, 0x69, 0x53, 0x58, 0x2B, 0x41, 0x45, 0x64, 0x6F, 0x55, 0x6E, 0x38,
			0x6D, 0x50, 0x4F, 0x69, 0x72, 0x43, 0x43, 0x70, 0x61, 0x52, 0x76, 0x55, 0x54, 0x68, 0x75, 0x55,
			0x77, 0x75, 0x56, 0x59, 0x50, 0x53, 0x6F, 0x74, 0x36, 0x49, 0x57, 0x71, 0x4D, 0x4A, 0x4F, 0x66,
			0x7A, 0x46, 0x42, 0x39, 0x4D, 0x50, 0x0A, 0x64, 0x4B, 0x4E, 0x36, 0x4A, 0x39, 0x58, 0x72, 0x41,
			0x6B, 0x45, 0x41, 0x32, 0x4F, 0x46, 0x70, 0x62, 0x4E, 0x71, 0x74, 0x50, 0x54, 0x2B, 0x65, 0x68,
			0x38, 0x46, 0x39, 0x35, 0x4C, 0x5A, 0x4D, 0x57, 0x57, 0x59, 0x65, 0x46, 0x56, 0x69, 0x57, 0x42,
			0x46, 0x51, 0x43, 0x6B, 0x57, 0x42, 0x63, 0x32, 0x52, 0x46, 0x4D, 0x75, 0x59, 0x58, 0x45, 0x50,
			0x4C, 0x77, 0x36, 0x4F, 0x4D, 0x73, 0x5A, 0x0A, 0x41, 0x32, 0x44, 0x47, 0x36, 0x4C, 0x44, 0x73,
			0x58, 0x53, 0x42, 0x67, 0x4C, 0x59, 0x59, 0x34, 0x51, 0x37, 0x69, 0x4D, 0x4C, 0x4E, 0x4A, 0x36,
			0x54, 0x7A, 0x2B, 0x76, 0x66, 0x67, 0x36, 0x36, 0x54, 0x77, 0x4A, 0x42, 0x41, 0x49, 0x63, 0x71,
			0x42, 0x6A, 0x69, 0x4B, 0x4D, 0x36, 0x4E, 0x79, 0x56, 0x64, 0x67, 0x7A, 0x51, 0x4E, 0x2F, 0x49,
			0x62, 0x6B, 0x39, 0x2F, 0x6D, 0x41, 0x2B, 0x46, 0x0A, 0x4F, 0x68, 0x64, 0x6B, 0x44, 0x74, 0x38,
			0x38, 0x45, 0x34, 0x6A, 0x63, 0x48, 0x77, 0x32, 0x62, 0x72, 0x75, 0x4D, 0x64, 0x78, 0x50, 0x36,
			0x64, 0x4C, 0x79, 0x49, 0x44, 0x4E, 0x73, 0x62, 0x38, 0x5A, 0x47, 0x36, 0x46, 0x6D, 0x59, 0x30,
			0x56, 0x50, 0x71, 0x69, 0x5A, 0x59, 0x64, 0x50, 0x32, 0x62, 0x38, 0x74, 0x51, 0x4E, 0x77, 0x70,
			0x67, 0x4B, 0x72, 0x38, 0x43, 0x51, 0x45, 0x4E, 0x37, 0x0A, 0x6E, 0x2F, 0x6F, 0x6D, 0x38, 0x4E,
			0x43, 0x6D, 0x41, 0x77, 0x58, 0x71, 0x78, 0x75, 0x6C, 0x72, 0x62, 0x38, 0x5A, 0x42, 0x61, 0x41,
			0x72, 0x73, 0x54, 0x59, 0x46, 0x37, 0x51, 0x6E, 0x46, 0x4A, 0x73, 0x70, 0x6F, 0x34, 0x4C, 0x38,
			0x39, 0x71, 0x4E, 0x2B, 0x31, 0x4F, 0x42, 0x43, 0x2B, 0x33, 0x77, 0x6B, 0x69, 0x79, 0x7A, 0x44,
			0x47, 0x4C, 0x47, 0x34, 0x43, 0x2B, 0x6D, 0x69, 0x36, 0x51, 0x0A, 0x48, 0x4F, 0x47, 0x31, 0x67,
			0x71, 0x68, 0x50, 0x74, 0x59, 0x38, 0x44, 0x47, 0x65, 0x2F, 0x33, 0x56, 0x54, 0x45, 0x43, 0x51,
			0x44, 0x4F, 0x53, 0x53, 0x34, 0x76, 0x62, 0x36, 0x72, 0x48, 0x37, 0x4D, 0x45, 0x77, 0x42, 0x44,
			0x57, 0x75, 0x58, 0x30, 0x51, 0x77, 0x6B, 0x57, 0x6C, 0x30, 0x42, 0x66, 0x4C, 0x5A, 0x6B, 0x75,
			0x58, 0x4D, 0x68, 0x5A, 0x42, 0x4E, 0x68, 0x51, 0x79, 0x7A, 0x2B, 0x0A, 0x79, 0x4A, 0x69, 0x75,
			0x65, 0x7A, 0x56, 0x39, 0x61, 0x48, 0x58, 0x4B, 0x55, 0x31, 0x78, 0x56, 0x76, 0x55, 0x79, 0x37,
			0x6F, 0x75, 0x56, 0x79, 0x34, 0x66, 0x7A, 0x35, 0x51, 0x34, 0x62, 0x71, 0x56, 0x57, 0x42, 0x54,
			0x42, 0x4E, 0x42, 0x6F, 0x43, 0x38, 0x49, 0x3D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x45, 0x4E,
			0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4B, 0x45,
			0x59, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x83, 0x82, 0x0D, 0xB2, 0xE5, 0x64, 0xA7, 0x36,
			0xC8, 0x9E, 0x2E, 0x87, 0xF6, 0xF6, 0x50, 0x87, 0x62, 0x33, 0x4A, 0xC5, 0x19, 0x59, 0x29, 0x07,
			0xF8, 0xF2, 0xB3, 0x0C, 0xB3, 0x37, 0xC8, 0xFE, 0x67, 0x2D, 0x1B, 0x36, 0x38, 0x84, 0xFB, 0x8E,
			0x3E, 0x6C, 0xAC, 0xA6, 0x7E, 0xDC, 0xA9, 0xC5, 0x44, 0xAD, 0x10, 0x66, 0xEF, 0x03, 0x23, 0x1B,
			0xEC, 0x81, 0x43, 0x2D, 0xCB, 0x04, 0xDE, 0x1A, 0xBF, 0x7D, 0x51, 0x0B, 0x48, 0x79, 0x7F, 0x77,
			0xA4, 0x2E, 0x46, 0x46, 0x35, 0x8E, 0xAB, 0xC4, 0x72, 0x53, 0x2F, 0x1D, 0x75, 0x92, 0x26, 0xDE,
			0x9A, 0x16, 0xA2, 0x69, 0xAE, 0xFE, 0x5C, 0xA1, 0x74, 0x41, 0x77, 0xC0, 0x84, 0x91, 0x13, 0xEE,
			0x65, 0xCA, 0x6F, 0xB5, 0x0A, 0x70, 0xDD, 0x2A, 0xE4, 0x08, 0x3F, 0x7B, 0xEE, 0x83, 0xE5, 0xF9,
			0xB2, 0x55, 0xAD, 0x5D, 0x4D, 0xDA, 0x91, 0xF1,
		}
		dest := "../test/data/unpack/"
		hh := TUnpackRSAOne{}
		hh.Name = make([]byte, 32)
		hh.Key = make([]byte, 1024)
		hh.OriginSize = make([]byte, 4)
		hh.CryptSize = make([]byte, 4)

		rd := bytes.NewReader(src)
		_, err := rd.Read(hh.Name)
		if err != nil {
			b.Fatal("Error read header name:", err)
		}
		_, err = rd.Read(hh.Key)
		if err != nil {
			b.Fatal("Error read header key:", err)
		}
		_, err = rd.Read(hh.OriginSize)
		if err != nil {
			b.Fatal("Error read header origin size:", err)
		}
		_, err = rd.Read(hh.CryptSize)
		if err != nil {
			b.Fatal("Error read header crypt size:", err)
		}
		s := make([]byte, BytesToInt(hh.CryptSize))
		n, err := rd.Read(s)
		if n <= 0 {
			b.Fatal("Error read body:", err)
		}
		err = UnpackRSAOneConfine(s, hh, dest)
		if err != nil {
			b.Fatal("Error unpack crypt file:", err)
		}
	}
}

// BenchmarkRSADecryptGo function
func BenchmarkRSADecryptGo(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var dest []byte
		var wg sync.WaitGroup
		src := []byte{
			0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
			0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
			0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
			0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
			0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
			0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
			0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
			0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
		}
		wg.Add(1)
		go RSADecryptGo(src, ConstRSAPrivateKey, &dest, &wg)
		wg.Wait()
		err := ioutil.WriteFile("../test/data/unpack/file.txt", dest, 0644)
		if err != nil {
			b.Fatal("Error Write RSA One:", err)
		}
	}
}

// BenchmarkRSADecrypt function
func BenchmarkRSADecrypt(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := []byte{
			0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
			0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
			0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
			0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
			0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
			0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
			0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
			0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
		}
		r, err := RSADecrypt(src, ConstRSAPrivateKey)
		if err != nil {
			b.Fatal("Error RSA Decrypt:", err)
		}
		err = ioutil.WriteFile("../test/data/unpack/file.txt", r, 0644)
		if err != nil {
			b.Fatal("Error Write RSA One:", err)
		}
	}
}
